#include "ros/ros.h"

#include "Tracker.h"
#include "Config.h"

#include <iostream>
#include <fstream>

#include <opencv/cv.h>
#include <opencv/highgui.h>

using namespace std;
using namespace cv;


static const int kLiveBoxWidth = 100;
static const int kLiveBoxHeight = 100;

void rectangle(Mat& rMat, const FloatRect& rRect, const Scalar& rColour)
{
	IntRect r(rRect);
	rectangle(rMat, Point(r.XMin(), r.YMin()), Point(r.XMax(), r.YMax()), rColour);
}

int main(int argc, char* argv[])
{
	string configPath = "config.txt";
	if (argc > 1)
	{
		configPath = argv[1];
	}
	Config conf(configPath);
	cout << conf << endl;
	
	if (conf.features.size() == 0)
	{
		cout << "error: no features specified in config" << endl;
		return EXIT_FAILURE;
	}
	
	ofstream outFile;
	if (conf.resultsPath != "")
	{
		outFile.open(conf.resultsPath.c_str(), ios::out);
		if (!outFile)
		{
			cout << "error: could not open results file: " << conf.resultsPath << endl;
			return EXIT_FAILURE;
		}
	}
	VideoCapture cap;
	
	int startFrame = -1;
	int endFrame = -1;
	FloatRect initBB;
	string imgFormat;
	float scaleW = 1.f;
	float scaleH = 1.f;

	if (!cap.open(0))
	{
		cout << "error: could not start camera capture" << endl;
		return EXIT_FAILURE;
	}
	startFrame = 0;
	endFrame = INT_MAX;
	Mat tmp;
	cap >> tmp;
	scaleW = (float)conf.frameWidth/tmp.cols;
	scaleH = (float)conf.frameHeight/tmp.rows;

	initBB = IntRect(conf.frameWidth/2-kLiveBoxWidth/2, conf.frameHeight/2-kLiveBoxHeight/2, kLiveBoxWidth, kLiveBoxHeight);
	Tracker tracker(conf);
	if (!conf.quietMode){
		namedWindow("result");
	}
	Mat result(conf.frameHeight, conf.frameWidth, CV_8UC3);
	bool paused = false;
	bool doInitialise = false;
	srand(conf.seed);


	int frameInd;
	ros::Rate loop_rate(20);
	while (ros::ok()){
		if(frameInd == 100){
			cout << "now start" << endl;
			doInitialise = true;
		}else if(frameInd == 10)
			cout << "3" <<endl;
		else if(frameInd == 40)
			cout << "2" <<endl;
		else if(frameInd == 70)
			cout << "1" <<endl;
		Mat frame;
		Mat frameOrig;
		cap >> frameOrig;
		resize(frameOrig, frame, Size(conf.frameWidth, conf.frameHeight));
		flip(frame, frame, 1);
		frame.copyTo(result);
		if (doInitialise)
		{
			if (tracker.IsInitialised())
			{
				tracker.Reset();
			}
			else
			{
				tracker.Initialise(frame, initBB);
			}
			doInitialise = false;
		}
		else if (!tracker.IsInitialised())
		{
			rectangle(result, initBB, CV_RGB(255, 255, 255));
		}
		if (tracker.IsInitialised())
		{
			tracker.Track(frame);
			
			if (!conf.quietMode && conf.debugMode)
			{
				tracker.Debug();
			}
			
			rectangle(result, tracker.GetBB(), CV_RGB(0, 255, 0));
			
			if (outFile)
			{
				const FloatRect& bb = tracker.GetBB();
				outFile << bb.XMin()/scaleW << "," << bb.YMin()/scaleH << "," << bb.Width()/scaleW << "," << bb.Height()/scaleH << endl;
			}
		}
		if (!conf.quietMode)
		{
			imshow("result", result);
			int key = waitKey(paused ? 0 : 1);
		}
		ros::spinOnce();
		loop_rate.sleep();
		++frameInd;
	}
	if (outFile.is_open())
	{
		outFile.close();
	}
	
	return EXIT_SUCCESS;
}